#!/usr/local/bin/sage -python

from sage.all import *  # this is mandatory to initialize Sage

printColor = "red"
pointSize = 2000
td = tmp_dir()

def setSize(visible):
    if visible == 1:
        return pointSize
    else:
        return 0

def tag(baseX,baseY):
    POLYGON = polygon2d([[baseX-1,baseY],[baseX+1,baseY],[baseX+1,baseY+3.5],[baseX-1,baseY+3.5]] , color=printColor, edgecolor="black", thickness=3, zorder=3)
    POLYGON += ellipse((baseX,baseY+3.5),0.9,0.5,pi,fill=True,edgecolor='black', facecolor='silver', thickness=3,zorder=2)
    POLYGON += polygon2d([[baseX-0.5,baseY+1.5],[baseX+1,baseY+1.5],[baseX+1,baseY+2.85],[baseX-0.5,baseY+2.85]] , color="white", edgecolor="black", thickness=3,zorder=4)
    POLYGON += polygon2d([[baseX-0.2,baseY+3.9],[baseX+0.2,baseY+3.9],[baseX+0.2,baseY+4.45],[baseX-0.2,baseY+4.45]] , color="grey", edgecolor="black",thickness=3,zorder=1)
    POLYGON += circle((baseX+0.13,baseY+4.26),0.06,fill=True,facecolor='black', thickness=0,zorder=2)
    return POLYGON
    
def tagspraying(baseX,baseY):
    POLYGON = polygon2d([[baseX-1,baseY],[baseX+1,baseY],[baseX+1,baseY+3.5],[baseX-1,baseY+3.5]] , color=printColor, edgecolor="black", thickness=3, zorder=3)
    POLYGON += ellipse((baseX,baseY+3.5),0.9,0.5,pi,fill=True,edgecolor='black', facecolor='silver', thickness=3,zorder=2)
    POLYGON += polygon2d([[baseX-0.5,baseY+1.5],[baseX+1,baseY+1.5],[baseX+1,baseY+2.85],[baseX-0.5,baseY+2.85]] , color="white", edgecolor="black", thickness=3,zorder=4)
    POLYGON += polygon2d([[baseX-0.2,baseY+3.9],[baseX+0.2,baseY+3.9],[baseX+0.2,baseY+4.45],[baseX-0.2,baseY+4.45]] , color="grey", edgecolor="black",thickness=3,zorder=1)
    POLYGON += circle((baseX+0.13,baseY+4.26),0.06,fill=True,facecolor='black', thickness=0,zorder=2)
    POLYGON += polygon([(baseX+0.14,baseY+4.26), (baseX+1.66,baseY+(4.28+0.78)), (baseX+1.66,baseY+(4.28-0.78))], color=printColor)
    return POLYGON

def DroiteH(tmpframe,min,max,pas,y,visible):    
    frames = []
    for x in srange(min,max,pas):
        frame = tmpframe + point((x,y),size=setSize(visible),color=printColor)
        tmpframe = frame
        if visible == 1:
            frame += tagspraying(x-2,y-4.28)
        else:
            frame += tag(x-2,y-4.28)
        frames.append(frame)
    frames.append(tmpframe)
    return frames
    
def DroiteV(tmpframe,min,max,pas,x,visible):    
    frames = []
    for y in srange(min,max,pas):
        frame = tmpframe + point((x,y),size=setSize(visible),color=printColor)
        tmpframe = frame
        if visible == 1:
            frame += tagspraying(x-2,y-4.28)
        else:
            frame += tag(x-2,y-4.28)
        frames.append(frame)
    frames.append(tmpframe)
    return frames
        
def Diagonale(tmpframe,min,max,pas,a,b,visible):
    frames = []
    
    for x in srange(min,max,pas):
        frame = tmpframe + point((x,a*x+b),size=setSize(visible),color=printColor)
        tmpframe = frame
        if visible == 1:
            frame += tagspraying(x-2,a*x+(b-4.28))
        else:
            frame += tag(x-2,a*x+(b-4.28))
        frames.append(frame)
    frames.append(tmpframe)
    return frames
    
def getXdegree(value,mul,pos):
    return ((math.cos(value * (math.pi / 180))) * mul)+pos
        
def getYdegree(value,mul,pos):
    return ((math.sin(value * (math.pi / 180))) * mul)+pos
    
def Courbe(tmpframe,min,max,pas,mulx,posx,muly,posy,visible):
    frames = []
    for deg in srange(min,max,pas):
        frame = tmpframe + point((getXdegree(deg,mulx,posx),getYdegree(deg,muly,posy)),size=setSize(visible),color=printColor)
        tmpframe = frame
        if visible == 1:
            frame += tagspraying(getXdegree(deg,mulx,posx-2),getYdegree(deg,muly,posy-4.28))
        else:
            frame += tag(getXdegree(deg,mulx,posx-2),getYdegree(deg,muly,posy-4.28))
        frames.append(frame)
    return frames

def Animate(frames,xmin,ymin,xmax,ymax,sizex,sizey,delay,it):
    A = animate(frames,xmin=xmin,ymin=ymin,xmax=xmax,ymax=xmax,figsize=[sizex,sizey])
    return A

def E():
    tmpframe = point((0,0),size=0)
    frames = []
    frames.append(tmpframe)
    frames += DroiteV(frames[-1],-5,5,0.2,-3,1)
    tmpframe = frames[-1]
    frames += DroiteH(tmpframe,-3,3,0.2,5,1)
    tmpframe = frames[-1]
    frames.pop()
    frames += Diagonale(tmpframe,3,-3,-0.05,(5/6),2.5,0)
    tmpframe = frames[-1]
    frames.pop()
    frames += DroiteH(tmpframe,-3,2,0.2,0,1)
    tmpframe = frames[-1]
    frames.pop()
    frames += Diagonale(tmpframe,2,-3,-0.05,1,-2,0)
    tmpframe = frames[-1]
    frames.pop()
    frames += DroiteH(tmpframe,-3,3,0.2,-5,1)
    return frames
(Animate(E(),-10,-10,10,10,8,8,4,1)).ffmpeg(savefile=td + 'new.gif')


